var ex = {};
var log = require("./logger.js");
var stories;
var steps = {};
var util = require('util');



var results = [];

ex.setStories = function(st){
    stories = st;
};

ex.setSteps = function(inits,whens,thens){
    steps.inits = inits;
    steps.whens = whens;
    steps.thens = thens;
};

ex.execute = function(){
    log.hashline();
    log.hashline();
    log.title("Tests Begin");
    log.hashline();
    runStories();

    log.hashline();

};




//*****************************************//
//                  Inits
//*****************************************//


function runInits(){

    steps.inits.forEach(function(init){
        init.cb();
    });
}

//*****************************************//
//                  Stories
//*****************************************//


var tempMessages;
var index = 0;

function newMsg(msg){
    tempMessages[index].msgs.push(msg);
}

function runStories(){

    stories.forEach(function(st){
        log.hashline();
        runInits();
        var storyPassed = true;
        tempMessages = [];



         index = 0;
        st.tests.forEach(function(scenario){

            curState = "None";

            tempMessages.push({passed:true,msgs:[]});


            function failed(e){
                storyPassed = false;
                skip = true;
                var msg = e;
                if(e.stack) msg += '\n' + e.stack;
                newMsg(msg);
                tempMessages[index].passed=false;
            }

            newMsg(scenario.title);
            var skip = false;
            scenario.content.forEach(function(storyStep){
                if(skip) return;
                newMsg(storyStep.content);
                if(storyStep.type == "LOG"){
                    //DO nothing
                }else if(storyStep.type == "RUN"){
                    try{
                        runStoryStep(storyStep.content);
                    }catch(e){
                        failed(e);
                    }
                }



             });

            index++;
        });

        log.storyTitle(st.file,storyPassed);
        log.newline();

        tempMessages.forEach(function(msgList){
            for(var a = 0; a < msgList.msgs.length; a++){

                var msg = msgList.msgs[a];
                var isLast = a == msgList.msgs.length -1;
                var isSecondLast = a == msgList.msgs.length -2;

                if(a == 0){
                    log.storyLine("TEST" + (!msgList.passed ? " (FAILED)" : "") + ": " + msg,msgList.passed);
                }else if(isLast || isSecondLast){
                    log.storyLine(msg,msgList.passed);
                }else{
                    log.storyLine(msg,true);
                }
            }

            log.newline();
            log.newline();
        });
        log.hashline();

    });



}


var curState = "None";

function runStoryStep(storyStep){

        var parts = storyStep.split(" ");

        parts[0] = parts[0].trim();
        var stepText = parts.slice(1).join(" ");


        var stepsToUse;
        if(parts[0]== "When" || (curState == "When" && parts[0] == "And")){

            stepsToUse = steps.whens;
            curState = "When";

        }else if(parts[0] == "Then" || (curState == "Then" && parts[0] == "And")){

            stepsToUse = steps.thens;
            curState = "Then";

        }else if(parts[0] == "And" && curState == "None"){
            throw "Invalid Story And Word: " + parts[0] + " [Must be used folling When or Then]";
        }
        else{
            throw "Invalid Story Lead Word: " + parts[0] + " [When, Then, And]";
        }

        var found = false;
        for(var a = 0; a < stepsToUse.length; a++){
            var reg = stepsToUse[a].reg;
            if(reg && reg.test(stepText)){
                found = true;
                var matched = reg.exec(stepText);
                var old = console.log;
                console.log=function(msg){
                    newMsg("[CONSOLE] - " + msg);
                };
                try {
                    stepsToUse[a].cb.apply(this, matched.splice(1));
                    console.log = old;
                }catch(e) {
                    console.log = old;
                    throw e;
                }

            }
        }

    if(!found){
        throw "Step Not Found Exception (^^^^)";
    }

}





module.exports = ex;